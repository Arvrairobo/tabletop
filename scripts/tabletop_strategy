#! /usr/bin/env python

"""Implements the tabletop strategy."""

from math import pi
import rospy
import tf
import tf2_ros
from std_msgs.msg import Bool
from geometry_msgs.msg import PoseStamped
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from ros_arduino_msgs.msg import Digital
from diff_drive.pose import Pose

class State:

    def __init__(self, name):
        self.name = name

    def get_name(self):
        return self.name


class States:
    IDLE = State('IDLE')
    FACING_BLOCK = State('FACING_BLOCK')
    APPROACHING_BLOCK = State('APPROACHING_BLOCK')
    GRABBING_BLOCK = State('GRABBING_BLOCK')
    FACING_GOAL = State('FACING_GOAL')
    APPROACHING_GOAL = State('APPROACHING_GOAL')
    PLACING_BLOCK = State('PLACING_BLOCK')
    LEAVING_BLOCK = State('LEAVING_BLOCK')
    FACING_ORIGIN = State('FACING_ORIGIN')
    RETURNING_TO_ORIGIN = State('RETURNING_TO_ORIGIN')

class Strategy:

    def run(self):
        rospy.init_node('tabletop_strategy')

        self.state = States.IDLE
        self.state_list = []
 
        self.tf_buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tf_buffer)

        rate = rospy.Rate(rospy.get_param('~rate', 10.0))

        self.block_frame = rospy.get_param('~block_frame', 'block')
        self.goal_frame = rospy.get_param('~block_frame', 'goal')
        self.reference_frame = rospy.get_param('~reference_frame', 'odom')

        self.goal_pub = rospy.Publisher('move_base_simple/goal', PoseStamped,
                                        queue_size=1)

        rospy.Subscriber('goal_achieved', Bool, self.on_goal_achieved)
        rospy.Subscriber('arduino/sensor/button_a', Digital,
                         self.on_button_a)
        rospy.Subscriber('arduino/sensor/button_b', Digital,
                         self.on_button_b)

        while not rospy.is_shutdown():
            rate.sleep()


    def on_button_a(self, msg):
        if self.state is States.IDLE and msg.value == 1:
            block_pose = self.get_frame_pose(self.block_frame)
            goal_pose = Pose()
            goal_pose.x = block_pose.x - 0.25
            goal_pose.y = block_pose.y
            goal_pose.theta = 0
            self.send_goal_pose(goal_pose)

    def on_button_b(self, msg):
        if self.state is States.IDLE and msg.value == 1:
            rospy.loginfo('Should start plan 2')
        pass

    def on_goal_achieved(self, msg):
        pass

    def get_frame_pose(self, frame):
        try:
            trans = self.tf_buffer.lookup_transform(self.reference_frame,
                                                    frame, rospy.Time(0))
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException,
                tf2_ros.ExtrapolationException) as e:
            rospy.logerr('Cannot get transform %s --> %s: %s',
                         self.reference_frame, frame, str(e))
            return

        q = [trans.transform.rotation.x,
             trans.transform.rotation.y,
             trans.transform.rotation.z,
             trans.transform.rotation.w]
        roll, pitch, yaw = euler_from_quaternion(q)

        pose = Pose()
        pose.x = trans.transform.translation.x
        pose.y = trans.transform.translation.y
        pose.theta = yaw

        return pose

    def send_goal_pose(self, pose):
        q = quaternion_from_euler(0, 0, pose.theta)

        goal = PoseStamped()
        goal.header.frame_id = self.reference_frame
        goal.pose.position.x = pose.x
        goal.pose.position.y = pose.y
        goal.pose.orientation.x = q[0]
        goal.pose.orientation.y = q[1]
        goal.pose.orientation.z = q[2]
        goal.pose.orientation.w = q[3]
        self.goal_pub.publish(goal)

if __name__ == "__main__":
    try:
        Strategy().run()

    except rospy.ROSInterruptException:
        pass
