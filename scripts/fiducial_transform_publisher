#! /usr/bin/env python

"""Publishes TF transforms from fiducial detections."""

import rospy
import tf
import tf2_ros
from tf.broadcaster import TransformBroadcaster
from fiducial_msgs.msg import FiducialTransformArray


class Topics:
    FIDUCIAL_TRANSFORMS = '/fiducial_transforms'


class TransformPublisher:

    def run(self):
        rospy.init_node('transform_publisher')

        self.tfPub = TransformBroadcaster()

        self.camera_frame = rospy.get_param('~camera_frame')
        self.fiducials = rospy.get_param('~fiducials')
        self.frame_for_fiducial = {}
        for f in self.fiducials:
            self.frame_for_fiducial[f['id']] = f['frame']

        rospy.Subscriber(Topics.FIDUCIAL_TRANSFORMS, FiducialTransformArray,
                         self.on_fiducial_transforms)

        rospy.loginfo('camera frame: %s', self.camera_frame)
        for f in self.fiducials:
            rospy.loginfo('id=%d frame=%s', f['id'], f['frame'])

        rospy.spin()


    def on_fiducial_transforms(self, msg):
        time = msg.header.stamp
        for t in msg.transforms:
            if not t.fiducial_id in self.frame_for_fiducial:
                rospy.loginfo('Fiducial not found: %d', t.fiducial_id)
            else:
                frame = self.frame_for_fiducial[t.fiducial_id]
                rospy.loginfo('Found fiducial %d --> %s', t.fiducial_id,
                              frame)
                translation = t.transform.translation
                rotation = t.transform.rotation
                # Adjust the transformation to be relative to the camera.
                self.tfPub.sendTransform(
                    (translation.z, -translation.x, translation.y),
                    (-rotation.x, -rotation.y, -rotation.z, rotation.w),
                    time, frame, self.camera_frame)


if __name__ == "__main__":
    try:
        TransformPublisher().run()

    except rospy.ROSInterruptException:
        pass
